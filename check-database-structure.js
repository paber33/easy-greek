const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º .env.local —Ñ–∞–π–ª
let supabaseUrl = '';
let supabaseKey = '';

try {
  const envContent = fs.readFileSync('.env.local', 'utf8');
  const lines = envContent.split('\n');
  
  for (const line of lines) {
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_URL=')) {
      supabaseUrl = line.split('=')[1];
    }
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_ANON_KEY=')) {
      supabaseKey = line.split('=')[1];
    }
  }
} catch (error) {
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env.local —Ñ–∞–π–ª');
  process.exit(1);
}

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDatabaseStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
  const tables = ['cards', 'session_logs', 'user_configs'];
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase.from(table).select('*').limit(1);
      if (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    } catch (err) {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${err.message}`);
    }
  }
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ RLS...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å
  try {
    const { data, error } = await supabase.rpc('check_rls_policies');
    if (error) {
      console.log('‚ÑπÔ∏è  –§—É–Ω–∫—Ü–∏—è check_rls_policies –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
    }
  } catch (err) {
    console.log('‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ RPC');
  }
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data, error } = await supabase.auth.signUp({
      email: 'test-check@easy-greek.com',
      password: 'test123456',
    });
    
    if (error) {
      if (error.message.includes('User already registered')) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test-check —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —É–¥–∞–ª—è–µ–º –µ–≥–æ');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å
        const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
          email: 'test-check@easy-greek.com',
          password: 'test123456',
        });
        
        if (signInData?.user) {
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { error: deleteError } = await supabase.auth.admin.deleteUser(signInData.user.id);
          if (deleteError) {
            console.log('‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
          } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
          }
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.status);
      }
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test-check —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('User ID:', data.user?.id);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (data.user?.id) {
        const { error: deleteError } = await supabase.auth.admin.deleteUser(data.user.id);
        if (deleteError) {
          console.log('‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } else {
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
        }
      }
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
  }
}

checkDatabaseStructure();
