#!/usr/bin/env node

const { chromium } = require('@playwright/test');

async function checkButtonsAfterLogin() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...\n');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    await page.goto('http://localhost:3000/');
    await page.waitForLoadState('networkidle');
    
    // –í—Ö–æ–¥–∏–º –∫–∞–∫ Pavel
    console.log('üîÑ –í—Ö–æ–¥–∏–º –∫–∞–∫ Pavel...');
    const pavelButton = page.locator('button:has-text("Pavel"), button:has-text("üë®‚Äçüíª Pavel")');
    await pavelButton.first().click();
    await page.waitForTimeout(5000);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const allButtons = await page.evaluate(() => {
      return Array.from(document.querySelectorAll('button')).map(btn => ({
        text: btn.textContent?.trim(),
        className: btn.className,
        id: btn.id,
        disabled: btn.disabled
      }));
    });
    
    console.log('üîò –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:');
    allButtons.forEach((btn, index) => {
      console.log(`   ${index + 1}. "${btn.text}" (disabled: ${btn.disabled})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userSwitcherButtons = allButtons.filter(btn => 
      btn.text?.includes('Pavel') || 
      btn.text?.includes('Aleksandra') ||
      btn.text?.includes('üë®‚Äçüíª') ||
      btn.text?.includes('üë©‚Äçüíª')
    );
    
    console.log('\nüë• –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    userSwitcherButtons.forEach((btn, index) => {
      console.log(`   ${index + 1}. "${btn.text}" (disabled: ${btn.disabled})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authState = await page.evaluate(() => {
      return {
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
        currentUser: localStorage.getItem('supabase.auth.token') ? '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      };
    });
    
    console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${authState.isSignedIn}`);
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${authState.cards}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${authState.currentUser}`);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'buttons-after-login.png' });
    console.log('\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: buttons-after-login.png');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

checkButtonsAfterLogin();
