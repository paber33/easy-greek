const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º .env.local —Ñ–∞–π–ª
let supabaseUrl = '';
let supabaseKey = '';

try {
  const envContent = fs.readFileSync('.env.local', 'utf8');
  const lines = envContent.split('\n');
  
  for (const line of lines) {
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_URL=')) {
      supabaseUrl = line.split('=')[1];
    }
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_ANON_KEY=')) {
      supabaseKey = line.split('=')[1];
    }
  }
} catch (error) {
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env.local —Ñ–∞–π–ª');
  process.exit(1);
}

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkUsers() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ SQL (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
  try {
    const { data, error } = await supabase
      .from('auth.users')
      .select('id, email, email_confirmed_at, created_at')
      .in('email', ['pavel@easy-greek.com', 'aleksandra@easy-greek.com']);
    
    if (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ SQL:', error.message);
    } else {
      console.log('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ SQL:', data);
    }
  } catch (err) {
    console.log('‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ SQL (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è RLS)');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Auth API
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Auth API...');
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∫–∞–∫ Pavel
    const { data: pavelData, error: pavelError } = await supabase.auth.signInWithPassword({
      email: 'pavel@easy-greek.com',
      password: 'pavel123456',
    });
    
    if (pavelError) {
      console.log('‚ùå Pavel - –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', pavelError.message);
      console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', pavelError.status);
    } else {
      console.log('‚úÖ Pavel - –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');
      console.log('User ID:', pavelData.user?.id);
      console.log('Email confirmed:', pavelData.user?.email_confirmed_at);
    }
  } catch (err) {
    console.log('‚ùå Pavel - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∫–∞–∫ Aleksandra
    const { data: aleksandraData, error: aleksandraError } = await supabase.auth.signInWithPassword({
      email: 'aleksandra@easy-greek.com',
      password: 'aleksandra123456',
    });
    
    if (aleksandraError) {
      console.log('‚ùå Aleksandra - –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', aleksandraError.message);
      console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', aleksandraError.status);
    } else {
      console.log('‚úÖ Aleksandra - –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');
      console.log('User ID:', aleksandraData.user?.id);
      console.log('Email confirmed:', aleksandraData.user?.email_confirmed_at);
    }
  } catch (err) {
    console.log('‚ùå Aleksandra - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏...');
  try {
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    if (sessionError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError.message);
    } else if (session) {
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:', session.user?.email);
    } else {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', err.message);
  }
}

checkUsers();
