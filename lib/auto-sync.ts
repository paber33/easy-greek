/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Supabase
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import { syncService } from "./sync";
import {
  loadCards,
  saveCards,
  loadLogs,
  appendSessionLog,
  loadConfig,
  saveConfig,
} from "./core/storage";
import { Card, SessionSummary, SRSConfig } from "@/types";
import { conflictResolver } from "./conflict-resolution";

export class AutoSyncService {
  private syncInterval: NodeJS.Timeout | null = null;
  private isOnline = navigator.onLine;
  private lastSyncTime = 0;
  private readonly SYNC_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
  private readonly MIN_SYNC_INTERVAL = 5000; // –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è–º–∏

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ event listeners –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
  private onlineHandler = () => {
    this.isOnline = true;
    console.log("üåê Online - starting sync");
    this.forceSync();
  };

  private offlineHandler = () => {
    this.isOnline = false;
    console.log("üì¥ Offline - stopping sync");
    this.stopAutoSync();
  };

  private storageHandler = (e: StorageEvent) => {
    if (e.key && e.key.includes("cards") && e.newValue) {
      console.log("üîÑ Storage changed - triggering sync");
      this.scheduleSync();
    }
  };

  private visibilityHandler = () => {
    if (!document.hidden && this.isOnline) {
      console.log("üëÅÔ∏è Page visible - checking for sync");
      this.scheduleSync();
    }
  };

  private focusHandler = () => {
    if (this.isOnline) {
      console.log("üéØ Window focused - checking for sync");
      this.scheduleSync();
    }
  };

  constructor() {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if (typeof window === "undefined") {
      console.warn("AutoSyncService: Constructor called on server - skipping initialization");
      return;
    }

    this.setupEventListeners();
    this.startAutoSync();
  }

  private setupEventListeners() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    window.addEventListener("online", this.onlineHandler);
    window.addEventListener("offline", this.offlineHandler);

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage (–¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏)
    window.addEventListener("storage", this.storageHandler);

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener("visibilitychange", this.visibilityHandler);

    // –°–ª—É—à–∞–µ–º —Ñ–æ–∫—É—Å –æ–∫–Ω–∞
    window.addEventListener("focus", this.focusHandler);
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  public startAutoSync() {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
    }

    this.syncInterval = setInterval(() => {
      if (this.isOnline && this.shouldSync()) {
        this.performSync();
      }
    }, this.SYNC_INTERVAL);

    console.log("üîÑ Auto-sync started");
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  public stopAutoSync() {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
    console.log("‚èπÔ∏è Auto-sync stopped");
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º)
   */
  public scheduleSync() {
    const now = Date.now();
    if (now - this.lastSyncTime > this.MIN_SYNC_INTERVAL) {
      this.performSync();
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
   */
  public async forceSync() {
    console.log("üöÄ Force sync triggered");
    try {
      await this.performSync();
    } catch (error) {
      console.error("‚ùå Force sync failed:", error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
   */
  private shouldSync(): boolean {
    const now = Date.now();
    return now - this.lastSyncTime > this.MIN_SYNC_INTERVAL;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  private async performSync() {
    if (!this.isOnline) {
      console.log("üì¥ Skipping sync - offline");
      return;
    }

    try {
      // Check if user is authenticated before syncing
      const { supabaseRepository } = await import("./repositories/supabase/supabase-repository");
      const isAuth = await supabaseRepository.isAuthenticated();
      if (!isAuth) {
        console.log("üîê Skipping sync - user not authenticated");
        return;
      }

      console.log("üîÑ Starting full sync...");

      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
      const cloudData = await this.loadFromCloud();

      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const localData = await this.loadFromLocal();

      // 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –æ–±–ª–∞—á–Ω—ã—Ö)
      const mergedData = this.mergeData(cloudData, localData);

      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
      this.saveToLocal(mergedData);

      // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ
      await this.saveToCloud(mergedData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this.lastSyncTime = Date.now();
      console.log("‚úÖ Full sync completed successfully");
    } catch (error) {
      console.error("‚ùå Sync failed:", error);
      // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º lastSyncTime –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
   */
  private async loadFromCloud() {
    try {
      const userData = await syncService.loadUserData();
      return userData || { cards: [], logs: [], config: null };
    } catch (error) {
      console.log("Failed to load from cloud:", error);
      return { cards: [], logs: [], config: null };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  private async loadFromLocal() {
    try {
      const cards = await loadCards();
      const logs = loadLogs();
      const config = await loadConfig();
      return { cards, logs, config };
    } catch (error) {
      console.log("Failed to load from local:", error);
      return { cards: [], logs: [], config: null };
    }
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   */
  private mergeData(cloudData: any, localData: any) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    const mergedCards = conflictResolver.resolveCards(cloudData.cards, localData.cards);
    const mergedLogs = conflictResolver.resolveLogs(cloudData.logs, localData.logs);
    const mergedConfig = conflictResolver.resolveConfig(cloudData.config, localData.config);

    return {
      cards: mergedCards,
      logs: mergedLogs,
      config: mergedConfig,
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
   */
  private saveToLocal(data: any) {
    try {
      saveCards(data.cards);
      // Save logs individually using appendSessionLog
      data.logs.forEach((log: SessionSummary) => {
        appendSessionLog(log);
      });
      if (data.config) {
        saveConfig(data.config);
      }
    } catch (error) {
      console.error("Failed to save to local:", error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ
   */
  private async saveToCloud(data: any) {
    try {
      if (data.cards.length > 0) {
        await syncService.syncCards(data.cards);
      }
      if (data.logs.length > 0) {
        await syncService.syncSessionLogs(data.logs);
      }
      if (data.config) {
        await syncService.syncConfig(data.config);
      }
    } catch (error) {
      console.error("Failed to save to cloud:", error);
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏
   */
  public async syncCards() {
    try {
      const cards = await loadCards();
      await syncService.syncCards(cards);
      console.log(`‚úÖ Synced ${cards.length} cards`);
    } catch (error) {
      console.error("‚ùå Failed to sync cards:", error);
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏
   */
  public async syncLogs() {
    try {
      const logs = loadLogs();
      await syncService.syncSessionLogs(logs);
      console.log(`‚úÖ Synced ${logs.length} logs`);
    } catch (error) {
      console.error("‚ùå Failed to sync logs:", error);
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  public async syncConfig() {
    try {
      const config = await loadConfig();
      await syncService.syncConfig(config);
      console.log("‚úÖ Synced config");
    } catch (error) {
      console.error("‚ùå Failed to sync config:", error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  public getSyncStatus() {
    return {
      isOnline: this.isOnline,
      lastSyncTime: this.lastSyncTime,
      isAutoSyncActive: !!this.syncInterval,
      timeSinceLastSync: Date.now() - this.lastSyncTime,
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
   */
  public destroy() {
    this.stopAutoSync();

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ event listeners
    window.removeEventListener("online", this.onlineHandler);
    window.removeEventListener("offline", this.offlineHandler);
    window.removeEventListener("storage", this.storageHandler);
    document.removeEventListener("visibilitychange", this.visibilityHandler);
    window.removeEventListener("focus", this.focusHandler);

    console.log("üßπ Auto-sync service destroyed");
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
let _autoSyncService: AutoSyncService | null = null;

export const getAutoSyncService = (): AutoSyncService => {
  if (typeof window === "undefined") {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    return {
      startAutoSync: () => {
        console.log("AutoSync: startAutoSync called on server - no-op");
      },
      stopAutoSync: () => {
        console.log("AutoSync: stopAutoSync called on server - no-op");
      },
      scheduleSync: () => {
        console.log("AutoSync: scheduleSync called on server - no-op");
      },
      forceSync: async () => {
        console.log("AutoSync: forceSync called on server - no-op");
      },
      syncCards: async () => {
        console.log("AutoSync: syncCards called on server - no-op");
      },
      syncLogs: async () => {
        console.log("AutoSync: syncLogs called on server - no-op");
      },
      syncConfig: async () => {
        console.log("AutoSync: syncConfig called on server - no-op");
      },
      getSyncStatus: () => ({
        isOnline: false,
        lastSyncTime: 0,
        isAutoSyncActive: false,
        timeSinceLastSync: 0,
      }),
      destroy: () => {
        console.log("AutoSync: destroy called on server - no-op");
      },
    } as AutoSyncService;
  }

  if (!_autoSyncService) {
    _autoSyncService = new AutoSyncService();
  }

  return _autoSyncService;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const autoSyncService = getAutoSyncService();
export default autoSyncService;
