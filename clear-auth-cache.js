#!/usr/bin/env node

const { chromium } = require('@playwright/test');

async function clearAuthCache() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    await page.goto('http://localhost:3001/');
    await page.waitForLoadState('networkidle');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await page.evaluate(() => {
      // –û—á–∏—â–∞–µ–º localStorage
      const keysToRemove = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && (key.includes('supabase') || key.includes('auth') || key.includes('easy-greek'))) {
          keysToRemove.push(key);
        }
      }
      
      keysToRemove.forEach(key => {
        localStorage.removeItem(key);
        console.log(`–£–¥–∞–ª–µ–Ω –∫–ª—é—á: ${key}`);
      });
      
      // –û—á–∏—â–∞–µ–º sessionStorage
      const sessionKeysToRemove = [];
      for (let i = 0; i < sessionStorage.length; i++) {
        const key = sessionStorage.key(i);
        if (key && (key.includes('supabase') || key.includes('auth'))) {
          sessionKeysToRemove.push(key);
        }
      }
      
      sessionKeysToRemove.forEach(key => {
        sessionStorage.removeItem(key);
        console.log(`–£–¥–∞–ª–µ–Ω session –∫–ª—é—á: ${key}`);
      });
      
      return {
        removedLocalKeys: keysToRemove,
        removedSessionKeys: sessionKeysToRemove
      };
    });
    
    console.log('‚úÖ –ö—ç—à –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    const cleanState = await page.evaluate(() => {
      return {
        localStorageKeys: Object.keys(localStorage).filter(key => 
          key.includes('supabase') || key.includes('auth') || key.includes('easy-greek')
        ),
        sessionStorageKeys: Object.keys(sessionStorage).filter(key => 
          key.includes('supabase') || key.includes('auth')
        ),
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length
      };
    });
    
    console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:');
    console.log(`   LocalStorage –∫–ª—é—á–∏: ${cleanState.localStorageKeys.join(', ') || '–Ω–µ—Ç'}`);
    console.log(`   SessionStorage –∫–ª—é—á–∏: ${cleanState.sessionStorageKeys.join(', ') || '–Ω–µ—Ç'}`);
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${cleanState.cards}`);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.reload();
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –∏—Å—á–µ–∑–ª–∏
    const consoleErrors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      }
    });
    
    await page.waitForTimeout(2000);
    
    if (consoleErrors.length === 0) {
      console.log('‚úÖ –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:');
      consoleErrors.forEach(error => {
        console.log(`   ‚ùå ${error}`);
      });
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'auth-cache-cleared.png' });
    console.log('\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: auth-cache-cleared.png');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

clearAuthCache();
