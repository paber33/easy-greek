#!/usr/bin/env node

const { chromium } = require('@playwright/test');

async function testFullAuthFlow() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    await page.goto('http://localhost:3001/');
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const initialState = await page.evaluate(() => {
      return {
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
        allKeys: Object.keys(localStorage).filter(key => key.includes('supabase') || key.includes('auth'))
      };
    });
    
    console.log('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${initialState.cards}`);
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${initialState.isSignedIn}`);
    console.log(`   Supabase –∫–ª—é—á–∏: ${initialState.allKeys.join(', ') || '–Ω–µ—Ç'}`);
    
    // –í—Ö–æ–¥–∏–º –∫–∞–∫ Pavel
    console.log('\nüîÑ –í—Ö–æ–¥–∏–º –∫–∞–∫ Pavel...');
    const pavelButton = page.locator('button:has-text("Pavel"), button:has-text("üë®‚Äçüíª Pavel")');
    await pavelButton.first().click();
    await page.waitForTimeout(5000);
    
    const pavelState = await page.evaluate(() => {
      return {
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
        allKeys: Object.keys(localStorage).filter(key => key.includes('supabase') || key.includes('auth')),
        userEmail: 'pavel@easy-greek.com'
      };
    });
    
    console.log('üë®‚Äçüíª Pavel:');
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${pavelState.cards}`);
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${pavelState.isSignedIn}`);
    console.log(`   Supabase –∫–ª—é—á–∏: ${pavelState.allKeys.join(', ')}`);
    console.log(`   Email: ${pavelState.userEmail}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
    const consoleMessages = [];
    page.on('console', msg => {
      consoleMessages.push({
        type: msg.type(),
        text: msg.text()
      });
    });
    
    await page.waitForTimeout(2000);
    
    const syncMessages = consoleMessages.filter(msg => 
      msg.text.includes('sync') || 
      msg.text.includes('Supabase') || 
      msg.text.includes('Loaded') ||
      msg.text.includes('Synced')
    );
    
    if (syncMessages.length > 0) {
      console.log('\nüìù –°–æ–æ–±—â–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
      syncMessages.forEach(msg => {
        if (msg.type === 'error') {
          console.log(`   ‚ùå ${msg.text}`);
        } else if (msg.type === 'warn') {
          console.log(`   ‚ö†Ô∏è  ${msg.text}`);
        } else {
          console.log(`   ‚úÖ ${msg.text}`);
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = await page.evaluate(() => {
      const toasts = document.querySelectorAll('[data-sonner-toast], .toast, [role="alert"]');
      return Array.from(toasts).map(toast => toast.textContent?.trim()).filter(Boolean);
    });
    
    if (notifications.length > 0) {
      console.log('\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:');
      notifications.forEach(notification => {
        console.log(`   ${notification}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏
    const errors = consoleMessages.filter(msg => msg.type === 'error');
    if (errors.length === 0) {
      console.log('\n‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    } else {
      console.log('\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:');
      errors.forEach(error => {
        console.log(`   ${error.text}`);
      });
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'full-auth-flow-test.png' });
    console.log('\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: full-auth-flow-test.png');
    
    console.log('\nüéâ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

testFullAuthFlow();
