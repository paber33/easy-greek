const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º .env.local —Ñ–∞–π–ª
let supabaseUrl = '';
let supabaseKey = '';

try {
  const envContent = fs.readFileSync('.env.local', 'utf8');
  const lines = envContent.split('\n');
  
  for (const line of lines) {
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_URL=')) {
      supabaseUrl = line.split('=')[1];
    }
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_ANON_KEY=')) {
      supabaseKey = line.split('=')[1];
    }
  }
} catch (error) {
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env.local —Ñ–∞–π–ª');
  process.exit(1);
}

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testUserCreation() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Pavel...');
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data, error } = await supabase.auth.signUp({
      email: 'pavel@easy-greek.com',
      password: 'pavel123456',
    });
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.status);
      
      if (error.message.includes('User already registered')) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Pavel —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
        const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
          email: 'pavel@easy-greek.com',
          password: 'pavel123456',
        });
        
        if (signInError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', signInError.message);
        } else {
          console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');
          console.log('User ID:', signInData.user?.id);
        }
      }
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Pavel —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('User ID:', data.user?.id);
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

testUserCreation();
