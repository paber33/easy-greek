#!/usr/bin/env node

const { chromium } = require('@playwright/test');

async function debugAuth() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    await page.goto('http://localhost:3002/');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const pageContent = await page.evaluate(() => {
      return {
        title: document.title,
        bodyText: document.body.textContent,
        allButtons: Array.from(document.querySelectorAll('button')).map(btn => ({
          text: btn.textContent?.trim(),
          className: btn.className,
          id: btn.id
        })),
        allInputs: Array.from(document.querySelectorAll('input')).map(input => ({
          type: input.type,
          placeholder: input.placeholder,
          className: input.className
        }))
      };
    });
    
    console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${pageContent.title}`);
    console.log(`   –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageContent.bodyText.substring(0, 200)}...`);
    
    console.log('\nüîò –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
    pageContent.allButtons.forEach((btn, index) => {
      console.log(`   ${index + 1}. "${btn.text}" (${btn.className})`);
    });
    
    console.log('\nüìù –í—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞:');
    pageContent.allInputs.forEach((input, index) => {
      console.log(`   ${index + 1}. ${input.type} - "${input.placeholder}"`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const localStorageData = await page.evaluate(() => {
      const data = {};
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key) {
          try {
            data[key] = JSON.parse(localStorage.getItem(key) || '');
          } catch {
            data[key] = localStorage.getItem(key);
          }
        }
      }
      return data;
    });
    
    console.log('\nüíæ LocalStorage:');
    Object.entries(localStorageData).forEach(([key, value]) => {
      if (typeof value === 'object') {
        console.log(`   ${key}: ${JSON.stringify(value).substring(0, 100)}...`);
      } else {
        console.log(`   ${key}: ${value}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    const consoleMessages = [];
    page.on('console', msg => {
      consoleMessages.push({
        type: msg.type(),
        text: msg.text()
      });
    });
    
    await page.waitForTimeout(3000);
    
    if (consoleMessages.length > 0) {
      console.log('\nüìù –°–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏:');
      consoleMessages.forEach(msg => {
        console.log(`   ${msg.type}: ${msg.text}`);
      });
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'debug-auth.png' });
    console.log('\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-auth.png');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

debugAuth();
