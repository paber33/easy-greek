#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–ª–æ–≤ —É –ü–∞–≤–ª–∞ –∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—ã
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç 76 —Å–ª–æ–≤ –≤ Supabase –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://swlsejtlrctqeemvmuwu.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN3bHNlanRscmN0cWVlbXZtdXd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk3MTUwNTYsImV4cCI6MjA3NTI5MTA1Nn0.7q0Q7HDWpMxz90dPGGP1Zlej8zu-D0HTgf-mmngBLuQ';

const supabase = createClient(supabaseUrl, supabaseKey);

// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Supabase)
const USER_EMAILS = {
  pavel: 'pavel@example.com',
  aleksandra: 'aleksandra@example.com'
};

async function setupSharedWords() {
  try {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ü–∞–≤–ª–∞ –∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—ã\n');

    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
    console.log('1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ greek-words-76.json...');
    const wordsPath = path.join(__dirname, 'greek-words-76.json');
    
    if (!fs.existsSync(wordsPath)) {
      console.error('‚ùå –§–∞–π–ª greek-words-76.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    const wordsData = JSON.parse(fs.readFileSync(wordsPath, 'utf8'));
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${wordsData.length} —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞\n`);

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ admin API');
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥...\n');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await createTestUsers(wordsData);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ`);
    
    // –ò—â–µ–º –ü–∞–≤–ª–∞ –∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É
    const pavelUser = users.users.find(u => u.email === USER_EMAILS.pavel);
    const aleksandraUser = users.users.find(u => u.email === USER_EMAILS.aleksandra);

    if (!pavelUser || !aleksandraUser) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Pavel –∏–ª–∏ Aleksandra –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('üí° –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
      await createTestUsers(wordsData);
      return;
    }

    console.log(`‚úÖ Pavel: ${pavelUser.email} (ID: ${pavelUser.id})`);
    console.log(`‚úÖ Aleksandra: ${aleksandraUser.email} (ID: ${aleksandraUser.id})\n`);

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('3Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –≤ Supabase...');
    
    await loadWordsForUser(pavelUser.id, wordsData, 'Pavel');
    await loadWordsForUser(aleksandraUser.id, wordsData, 'Aleksandra');

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`   - Pavel: ${wordsData.length} —Å–ª–æ–≤`);
    console.log(`   - Aleksandra: ${wordsData.length} —Å–ª–æ–≤`);
    console.log('   - –í—Å–µ —Å–ª–æ–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞');
    console.log('   - –î–∞–ª—å—à–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', error);
  }
}

async function createTestUsers(wordsData) {
  console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Pavel
    const { data: pavelData, error: pavelError } = await supabase.auth.signUp({
      email: USER_EMAILS.pavel,
      password: 'test123456',
      options: {
        data: {
          name: 'Pavel',
          profile_type: 'pavel'
        }
      }
    });

    if (pavelError) {
      console.log('‚ö†Ô∏è Pavel —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', pavelError.message);
    } else {
      console.log('‚úÖ Pavel —Å–æ–∑–¥–∞–Ω:', pavelData.user?.email);
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Aleksandra
    const { data: aleksandraData, error: aleksandraError } = await supabase.auth.signUp({
      email: USER_EMAILS.aleksandra,
      password: 'test123456',
      options: {
        data: {
          name: 'Aleksandra',
          profile_type: 'aleksandra'
        }
      }
    });

    if (aleksandraError) {
      console.log('‚ö†Ô∏è Aleksandra —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', aleksandraError.message);
    } else {
      console.log('‚úÖ Aleksandra —Å–æ–∑–¥–∞–Ω–∞:', aleksandraData.user?.email);
    }

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: { users }, error: listError } = await supabase.auth.admin.listUsers();
    
    if (listError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', listError);
      return;
    }

    const pavelUser = users.find(u => u.email === USER_EMAILS.pavel);
    const aleksandraUser = users.find(u => u.email === USER_EMAILS.aleksandra);

    if (pavelUser && aleksandraUser) {
      console.log('\nüìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      await loadWordsForUser(pavelUser.id, wordsData, 'Pavel');
      await loadWordsForUser(aleksandraUser.id, wordsData, 'Aleksandra');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
}

async function loadWordsForUser(userId, wordsData, userName) {
  try {
    console.log(`üìù –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è ${userName}...`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Supabase
    const cardsToInsert = wordsData.map((word, index) => ({
      user_id: userId,
      greek: word.greek,
      translation: word.translation,
      tags: word.tags || [],
      status: word.status || 'new',
      reps: 0,
      lapses: 0,
      ease: 2.5,
      interval_days: 0,
      last_review: null,
      due: new Date().toISOString(),
      correct: 0,
      incorrect: 0,
      learning_step_index: null,
      is_leech: false,
      examples: word.examples ? JSON.stringify(word.examples) : null,
      notes: word.notes || null,
      pronunciation: word.pronunciation || null,
      audio_url: word.audioUrl || null,
      image_url: word.imageUrl || null,
      difficulty: null,
      stability: null,
      current_step: null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }));

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    const { error: insertError } = await supabase
      .from('cards')
      .upsert(cardsToInsert, { 
        onConflict: 'user_id,greek,translation',
        ignoreDuplicates: false 
      });

    if (insertError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤ –¥–ª—è ${userName}:`, insertError);
      return;
    }

    console.log(`‚úÖ ${userName}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${cardsToInsert.length} —Å–ª–æ–≤`);

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤ –¥–ª—è ${userName}:`, error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupSharedWords();
