#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤ localStorage
 */
function fixCorruptedLogs() {
  console.log("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤...");

  const profiles = ["pavel", "aleksandra"];
  let totalFixed = 0;

  profiles.forEach(profileId => {
    try {
      const key = `easy-greek:${profileId}:logs`;
      const logsData = localStorage.getItem(key);

      if (!logsData) {
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${profileId}: –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      const logs = JSON.parse(logsData);
      const originalLength = logs.length;

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
      const validLogs = logs.filter(log => {
        const isValid =
          log.totalReviewed >= 0 &&
          log.totalReviewed <= 1000 &&
          log.correct >= 0 &&
          log.correct <= log.totalReviewed &&
          log.incorrect >= 0 &&
          log.incorrect <= log.totalReviewed &&
          log.newCards >= 0 &&
          log.newCards <= 100 &&
          log.reviewCards >= 0 &&
          log.reviewCards <= 1000 &&
          log.learningCards >= 0 &&
          log.learningCards <= 100 &&
          log.accuracy >= 0 &&
          log.accuracy <= 100 &&
          log.date &&
          log.date.length > 0;

        if (!isValid) {
          console.log(`‚ùå –£–¥–∞–ª–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –ª–æ–≥ –¥–ª—è ${profileId}:`, {
            date: log.date,
            totalReviewed: log.totalReviewed,
            correct: log.correct,
            incorrect: log.incorrect,
          });
        }

        return isValid;
      });

      const fixedCount = originalLength - validLogs.length;
      totalFixed += fixedCount;

      if (fixedCount > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
        localStorage.setItem(key, JSON.stringify(validLogs));
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${profileId}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –ª–æ–≥–æ–≤`);
      } else {
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${profileId}: –ª–æ–≥–∏ –≤ –ø–æ—Ä—è–¥–∫–µ`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}:`, error.message);
    }
  });

  console.log(`üéâ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤`);

  if (totalFixed > 0) {
    console.log("üí° –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤
 */
function showLogsStats() {
  console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:");

  const profiles = ["pavel", "aleksandra"];

  profiles.forEach(profileId => {
    try {
      const key = `easy-greek:${profileId}:logs`;
      const logsData = localStorage.getItem(key);

      if (!logsData) {
        console.log(`üìã –ü—Ä–æ—Ñ–∏–ª—å ${profileId}: –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      const logs = JSON.parse(logsData);
      const totalReviewed = logs.reduce((sum, log) => sum + log.totalReviewed, 0);
      const maxReviewed = Math.max(...logs.map(log => log.totalReviewed));
      const corruptedCount = logs.filter(log => log.totalReviewed > 1000).length;

      console.log(`üìã –ü—Ä–æ—Ñ–∏–ª—å ${profileId}:`);
      console.log(`   –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: ${logs.length}`);
      console.log(`   –í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${totalReviewed}`);
      console.log(`   –ú–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å: ${maxReviewed}`);
      console.log(`   –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤: ${corruptedCount}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}:`, error.message);
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window === "undefined") {
  console.log("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ");
  console.log("üí° –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:");
  console.log("   fixCorruptedLogs() - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ª–æ–≥–∏");
  console.log("   showLogsStats() - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
  process.exit(1);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.fixCorruptedLogs = fixCorruptedLogs;
window.showLogsStats = showLogsStats;

async function main() {
  switch (command) {
    case "fix":
      fixCorruptedLogs();
      break;
    case "stats":
      showLogsStats();
      break;
    default:
      console.log("üîß –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤");
      console.log("");
      console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:");
      console.log("  fixCorruptedLogs() - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ª–æ–≥–∏");
      console.log("  showLogsStats() - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
      console.log("");
      console.log("–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ package.json:");
      console.log('  "fix:logs": "node scripts/fix-corrupted-logs.js fix"');
      console.log('  "logs:stats": "node scripts/fix-corrupted-logs.js stats"');
      break;
  }
}

if (typeof window !== "undefined") {
  main().catch(error => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  });
}
