#!/usr/bin/env node

const { exec } = require("child_process");
const { promisify } = require("util");

const execAsync = promisify(exec);

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
 */
async function cleanupPorts(ports = [3000, 3001, 3002]) {
  console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤...");

  for (const port of ports) {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ ${port}...`);

      const { stdout } = await execAsync(`netstat -ano | findstr :${port}`);

      if (!stdout.trim()) {
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
        continue;
      }

      const lines = stdout.trim().split("\n");
      const pids = new Set();

      lines.forEach(line => {
        const parts = line.trim().split(/\s+/);
        if (parts.length >= 5 && parts[1].includes(`:${port}`)) {
          const pid = parts[parts.length - 1];
          if (pid && !isNaN(pid)) {
            pids.add(pid);
          }
        }
      });

      if (pids.size === 0) {
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
        continue;
      }

      console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É ${port}: ${Array.from(pids).join(", ")}`);

      for (const pid of pids) {
        try {
          await execAsync(`taskkill /PID ${pid} /F`);
          console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}: ${error.message}`);
        }
      }
    } catch (error) {
      console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
    }
  }

  console.log("üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–∞—Ö
 */
async function showPortInfo(ports = [3000, 3001, 3002]) {
  console.log("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç–∞—Ö:");

  for (const port of ports) {
    try {
      const { stdout } = await execAsync(`netstat -ano | findstr :${port}`);

      if (!stdout.trim()) {
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port}: —Å–≤–æ–±–æ–¥–µ–Ω`);
        continue;
      }

      const lines = stdout.trim().split("\n");
      const pids = new Set();

      lines.forEach(line => {
        const parts = line.trim().split(/\s+/);
        if (parts.length >= 5 && parts[1].includes(`:${port}`)) {
          const pid = parts[parts.length - 1];
          if (pid && !isNaN(pid)) {
            pids.add(pid);
          }
        }
      });

      if (pids.size > 0) {
        console.log(`‚ö†Ô∏è  –ü–æ—Ä—Ç ${port}: –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ ${Array.from(pids).join(", ")}`);
      } else {
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port}: —Å–≤–æ–±–æ–¥–µ–Ω`);
      }
    } catch (error) {
      console.log(`‚úÖ –ü–æ—Ä—Ç ${port}: —Å–≤–æ–±–æ–¥–µ–Ω`);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

async function main() {
  switch (command) {
    case "clean":
    case "cleanup":
      await cleanupPorts();
      break;
    case "info":
    case "status":
      await showPortInfo();
      break;
    default:
      console.log("üîß –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç–∞–º–∏");
      console.log("");
      console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
      console.log("  node scripts/cleanup-ports.js clean   - –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç—ã 3000-3002");
      console.log("  node scripts/cleanup-ports.js info    - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–∞—Ö");
      console.log("");
      console.log("–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ package.json:");
      console.log('  "cleanup:ports": "node scripts/cleanup-ports.js clean"');
      console.log('  "ports:info": "node scripts/cleanup-ports.js info"');
      break;
  }
}

main().catch(error => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  process.exit(1);
});
