#!/usr/bin/env node

const { exec } = require("child_process");
const { promisify } = require("util");
const fs = require("fs");
const path = require("path");

const execAsync = promisify(exec);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
 */
function validateFiles() {
  const requiredFiles = [
    "package.json",
    "next.config.ts",
    "app/layout.tsx",
    "app/page.tsx",
    "scripts/dev-server.js",
    "scripts/cleanup-ports.js",
  ];

  const missingFiles = [];

  requiredFiles.forEach(file => {
    if (!fs.existsSync(file)) {
      missingFiles.push(file);
    }
  });

  if (missingFiles.length > 0) {
    console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:");
    missingFiles.forEach(file => console.error(`   - ${file}`));
    return false;
  }

  console.log("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç");
  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ package.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
 */
function validateScripts() {
  try {
    const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"));
    const scripts = packageJson.scripts || {};

    const requiredScripts = ["dev", "dev:simple", "cleanup:ports", "ports:info"];
    const missingScripts = [];

    requiredScripts.forEach(script => {
      if (!scripts[script]) {
        missingScripts.push(script);
      }
    });

    if (missingScripts.length > 0) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ package.json:");
      missingScripts.forEach(script => console.error(`   - ${script}`));
      return false;
    }

    console.log("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:", error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Node.js –∏ npm
 */
async function validateEnvironment() {
  try {
    const { stdout: nodeVersion } = await execAsync("node --version");
    const { stdout: npmVersion } = await execAsync("npm --version");

    console.log(`‚úÖ Node.js: ${nodeVersion.trim()}`);
    console.log(`‚úÖ npm: ${npmVersion.trim()}`);

    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
 */
function validateDependencies() {
  if (!fs.existsSync("node_modules")) {
    console.error("‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install");
    return false;
  }

  const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"));
  const requiredDeps = ["next", "react", "react-dom"];

  for (const dep of requiredDeps) {
    if (!fs.existsSync(`node_modules/${dep}`)) {
      console.error(`‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install`);
      return false;
    }
  }

  console.log("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤
 */
async function validatePorts() {
  try {
    const { stdout } = await execAsync("netstat -ano | findstr :3000");

    if (stdout.trim()) {
      console.log("‚ö†Ô∏è  –ü–æ—Ä—Ç 3000 –∑–∞–Ω—è—Ç, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - dev —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç");
    } else {
      console.log("‚úÖ –ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω");
    }

    return true;
  } catch (error) {
    console.log("‚úÖ –ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω");
    return true;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
async function main() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ dev —Å–µ—Ä–≤–µ—Ä–∞...\n");

  const checks = [
    { name: "–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞", fn: validateFiles },
    { name: "–°–∫—Ä–∏–ø—Ç—ã package.json", fn: validateScripts },
    { name: "–û–∫—Ä—É–∂–µ–Ω–∏–µ Node.js", fn: validateEnvironment },
    { name: "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", fn: validateDependencies },
    { name: "–ü–æ—Ä—Ç—ã", fn: validatePorts },
  ];

  let allPassed = true;

  for (const check of checks) {
    console.log(`\nüìã ${check.name}:`);
    try {
      const result = await check.fn();
      if (!result) {
        allPassed = false;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
      allPassed = false;
    }
  }

  console.log("\n" + "=".repeat(50));

  if (allPassed) {
    console.log("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! Dev —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");
    console.log("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run dev");
  } else {
    console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º dev —Å–µ—Ä–≤–µ—Ä–∞.");
    console.log("\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ —Å–º. DEV_SERVER_GUIDE.md");
    process.exit(1);
  }
}

main().catch(error => {
  console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", error.message);
  process.exit(1);
});
