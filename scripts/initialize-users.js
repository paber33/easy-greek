#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ —É –Ω–∏—Ö –Ω–µ—Ç —Å–ª–æ–≤
 */

const { createClient } = require("@supabase/supabase-js");
const fs = require("fs");
const path = require("path");

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require("dotenv").config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error("‚ùå Missing Supabase environment variables");
  console.error("Make sure NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY are set");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
function loadWords() {
  try {
    const wordsPath = path.join(__dirname, "..", "greek-words-76.json");
    const wordsData = JSON.parse(fs.readFileSync(wordsPath, "utf8"));
    console.log(`üìö Loaded ${wordsData.length} words from greek-words-76.json`);
    return wordsData;
  } catch (error) {
    console.error("‚ùå Failed to load words:", error.message);
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
async function initializeUser(userId, userEmail) {
  try {
    console.log(`\nüîÑ Initializing user: ${userEmail} (${userId})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingCards, error: checkError } = await supabase
      .from("cards")
      .select("id")
      .eq("user_id", userId)
      .limit(1);

    if (checkError) {
      console.error(`‚ùå Error checking existing cards:`, checkError);
      return false;
    }

    if (existingCards && existingCards.length > 0) {
      console.log(`‚ö†Ô∏è User ${userEmail} already has ${existingCards.length} cards, skipping...`);
      return true;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞
    const words = loadWords();

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Supabase
    const cardsToInsert = words.map(word => ({
      user_id: userId,
      greek: word.greek,
      translation: word.translation,
      tags: word.tags || [],
      status: "new",
      reps: 0,
      lapses: 0,
      ease: 2.5,
      interval_days: 0,
      due: new Date().toISOString(),
      correct: 0,
      incorrect: 0,
      examples: word.examples || null,
      pronunciation: word.pronunciation || null,
      notes: word.notes || null,
    }));

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    const { error: insertError } = await supabase.from("cards").insert(cardsToInsert);

    if (insertError) {
      console.error(`‚ùå Error inserting cards:`, insertError);
      return false;
    }

    console.log(`‚úÖ Successfully initialized ${cardsToInsert.length} cards for ${userEmail}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error initializing user ${userEmail}:`, error);
    return false;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getAllUsers() {
  try {
    const {
      data: { users },
      error,
    } = await supabase.auth.admin.listUsers();

    if (error) {
      console.error("‚ùå Error fetching users:", error);
      return [];
    }

    return users || [];
  } catch (error) {
    console.error("‚ùå Error fetching users:", error);
    return [];
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("üöÄ Starting user initialization...\n");

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await getAllUsers();

    if (users.length === 0) {
      console.log("‚ö†Ô∏è No users found in the database");
      return;
    }

    console.log(`üë• Found ${users.length} users:`);
    users.forEach(user => {
      console.log(`  - ${user.email} (${user.id})`);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let successCount = 0;
    let skipCount = 0;
    let errorCount = 0;

    for (const user of users) {
      const result = await initializeUser(user.id, user.email);
      if (result === true) {
        if (user.email === "pavel@example.com" || user.email === "aleksandra@example.com") {
          successCount++;
        } else {
          skipCount++;
        }
      } else {
        errorCount++;
      }
    }

    console.log("\nüìä Summary:");
    console.log(`‚úÖ Successfully initialized: ${successCount} users`);
    console.log(`‚ö†Ô∏è Skipped (already have cards): ${skipCount} users`);
    console.log(`‚ùå Errors: ${errorCount} users`);

    if (successCount > 0) {
      console.log("\nüéâ Users have been initialized with 76 Greek words!");
      console.log("You can now test the application at https://greeklyfy.netlify.app/");
    }
  } catch (error) {
    console.error("‚ùå Fatal error:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

module.exports = { initializeUser, loadWords };
