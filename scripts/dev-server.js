#!/usr/bin/env node

const { spawn, exec } = require("child_process");
const net = require("net");

const PORT = 3000;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç
 */
function isPortFree(port) {
  return new Promise(resolve => {
    const server = net.createServer();

    server.listen(port, () => {
      server.once("close", () => {
        resolve(true);
      });
      server.close();
    });

    server.on("error", () => {
      resolve(false);
    });
  });
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∏ —É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π –ø–æ—Ä—Ç
 */
function killProcessOnPort(port) {
  return new Promise((resolve, reject) => {
    exec(`netstat -ano | findstr :${port}`, (error, stdout) => {
      if (error) {
        resolve(false);
        return;
      }

      const lines = stdout.trim().split("\n");
      const pids = new Set();

      lines.forEach(line => {
        const parts = line.trim().split(/\s+/);
        if (parts.length >= 5 && parts[1].includes(`:${port}`)) {
          const pid = parts[parts.length - 1];
          if (pid && !isNaN(pid)) {
            pids.add(pid);
          }
        }
      });

      if (pids.size === 0) {
        resolve(false);
        return;
      }

      console.log(`üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É ${port}: ${Array.from(pids).join(", ")}`);

      const killPromises = Array.from(pids).map(pid => {
        return new Promise(resolveKill => {
          exec(`taskkill /PID ${pid} /F`, killError => {
            if (killError) {
              console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}: ${killError.message}`);
            } else {
              console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} –∑–∞–≤–µ—Ä—à–µ–Ω`);
            }
            resolveKill();
          });
        });
      });

      Promise.all(killPromises).then(() => {
        // –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        setTimeout(resolve, 1000);
      });
    });
  });
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç Next.js dev —Å–µ—Ä–≤–µ—Ä
 */
function startDevServer() {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ Next.js dev —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);

  const child = spawn("npx", ["next", "dev", "-p", PORT.toString()], {
    stdio: "inherit",
    shell: true,
  });

  child.on("error", error => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error.message);
    process.exit(1);
  });

  child.on("exit", code => {
    if (code !== 0) {
      console.error(`‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
      process.exit(code);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
  process.on("SIGINT", () => {
    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...");
    child.kill("SIGINT");
  });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞...");

  const portFree = await isPortFree(PORT);

  if (!portFree) {
    console.log(`‚ö†Ô∏è  –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç. –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å...`);

    const killed = await killProcessOnPort(PORT);

    if (killed) {
      console.log("‚úÖ –ü–æ—Ä—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
    } else {
      console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç");
      console.log("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:");
      console.log("   1. –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç 3000");
      console.log("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª");
      console.log("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç: npm run dev -- -p 3001");
      process.exit(1);
    }
  } else {
    console.log(`‚úÖ –ü–æ—Ä—Ç ${PORT} —Å–≤–æ–±–æ–¥–µ–Ω`);
  }

  startDevServer();
}

main().catch(error => {
  console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
  process.exit(1);
});
