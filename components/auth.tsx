'use client'

import { useState, useEffect } from 'react'
import { supabase, isSupabaseConfigured } from '@/lib/supabase'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { loadAndSaveUserDataFromSupabase, mergeUserDataWithLocal, syncAllDataToSupabase } from '@/lib/core/storage'
import { testSupabaseConnection } from '@/lib/test-supabase'
import { getTestCards } from '@/lib/test-data'
import { USER_CONFIGS, getUserConfig, getCurrentUserFromEmail } from '@/lib/user-config'
import { clearAuthTokens, fixBrokenSession, safeSignIn, safeSignUp } from '@/lib/auth-utils'
import { toast } from 'sonner'
import { Logo } from '@/components/logo'

export function AuthComponent() {
  const [isLoading, setIsLoading] = useState(false)
  const [isSignedIn, setIsSignedIn] = useState(false)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isSyncing, setIsSyncing] = useState(false)
  const [isTesting, setIsTesting] = useState(false)
  const [isAutoLogin, setIsAutoLogin] = useState(false)
  const [isLoadingTestData, setIsLoadingTestData] = useState(false)
  const [currentUser, setCurrentUser] = useState<'pavel' | 'aleksandra' | null>(null)

  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        try {
          setIsSignedIn(!!session)
          
          if (event === 'SIGNED_IN' && session) {
            const userType = getCurrentUserFromEmail(session.user.email || '')
            setCurrentUser(userType)
            
            const userConfig = userType ? getUserConfig(userType) : null
            const userName = userConfig?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            
            toast.success(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! üëã`)
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
            await handleLoadUserData()
          } else if (event === 'SIGNED_OUT') {
            setCurrentUser(null)
            toast.info('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
          } else if (event === 'TOKEN_REFRESHED') {
            console.log('Token refreshed successfully')
          }
        } catch (error) {
          console.error('Auth state change error:', error)
          // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
          if (error instanceof Error && error.message.includes('refresh token')) {
            await supabase.auth.signOut()
            toast.error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
          }
        }
      }
    )

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å Pavel –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const autoLoginOnStartup = async () => {
      try {
        const result = await fixBrokenSession()
        
        if (!result.success) {
          if (result.needsReauth) {
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ Pavel
            setTimeout(() => {
              handleUserLogin('pavel')
            }, 1000)
          }
          return
        }
        
        if (!result.session) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å Pavel
          setTimeout(() => {
            handleUserLogin('pavel')
          }, 1000) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        } else {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userType = getCurrentUserFromEmail(result.session.user.email || '')
          setCurrentUser(userType)
        }
      } catch (error) {
        console.error('Auto login error:', error)
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
        clearAuthTokens()
        setTimeout(() => {
          handleUserLogin('pavel')
        }, 1000)
      }
    }

    autoLoginOnStartup()

    return () => subscription.unsubscribe()
  }, [])

  const handleSignUp = async () => {
    setIsLoading(true)
    try {
      const result = await safeSignUp(email, password)
      if (result.success) {
        toast.success('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!')
      } else {
        toast.error(result.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
      }
    } catch (error: any) {
      toast.error(error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    } finally {
      setIsLoading(false)
    }
  }

  const handleSignIn = async () => {
    setIsLoading(true)
    try {
      const result = await safeSignIn(email, password)
      if (!result.success) {
        toast.error(result.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞')
      }
    } catch (error: any) {
      toast.error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞')
    } finally {
      setIsLoading(false)
    }
  }

  const handleSignOut = async () => {
    try {
      await supabase.auth.signOut()
      // –û—á–∏—â–∞–µ–º localStorage –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      localStorage.removeItem('sb-' + (process.env.NEXT_PUBLIC_SUPABASE_URL?.split('//')[1]?.split('.')[0] || 'dummy') + '-auth-token')
    } catch (error) {
      console.error('Sign out error:', error)
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º localStorage
      localStorage.clear()
      window.location.reload()
    }
  }

  const handleLoadUserData = async () => {
    setIsSyncing(true)
    try {
      await loadAndSaveUserDataFromSupabase()
      toast.success('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–±–ª–∞–∫–∞!')
    } catch (error) {
      console.error('Failed to load user data:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞')
    } finally {
      setIsSyncing(false)
    }
  }

  const handleSyncToCloud = async () => {
    setIsSyncing(true)
    try {
      await syncAllDataToSupabase()
      toast.success('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ–±–ª–∞–∫–æ!')
    } catch (error) {
      console.error('Failed to sync data:', error)
      toast.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º')
    } finally {
      setIsSyncing(false)
    }
  }

  const handleTestConnection = async () => {
    setIsTesting(true)
    try {
      const result = await testSupabaseConnection()
      if (result.success) {
        toast.success('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!')
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}`)
      }
    } catch (error) {
      console.error('Test connection failed:', error)
      toast.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    } finally {
      setIsTesting(false)
    }
  }

  const handleUserLogin = async (userId: 'pavel' | 'aleksandra') => {
    setIsAutoLogin(true)
    try {
      const userConfig = getUserConfig(userId)
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: userConfig.email,
        password: userConfig.password,
      })
      
      if (signInError) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        console.log(`${userConfig.name} user not found, creating...`)
        const { error: signUpError } = await supabase.auth.signUp({
          email: userConfig.email,
          password: userConfig.password,
        })
        
        if (signUpError) {
          throw signUpError
        }
        
        toast.success(`‚úÖ –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å ${userConfig.name} —Å–æ–∑–¥–∞–Ω–∞!`)
      } else {
        toast.success(`‚úÖ –í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å ${userConfig.name} –≤—ã–ø–æ–ª–Ω–µ–Ω!`)
      }
    } catch (error: any) {
      console.error('User login failed:', error)
      toast.error(`–û—à–∏–±–∫–∞: ${error.message}`)
    } finally {
      setIsAutoLogin(false)
    }
  }

  const handleAutoLogin = async () => {
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤—Ö–æ–¥ –≤ Pavel
    await handleUserLogin('pavel')
  }

  const handleLoadTestData = async () => {
    setIsLoadingTestData(true)
    try {
      const testCards = getTestCards(currentUser || undefined)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
      const { saveCards } = await import('@/lib/core/storage')
      saveCards(testCards)
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase
      await syncAllDataToSupabase()
      
      const userName = currentUser ? getUserConfig(currentUser).name : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      toast.success(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${userName}!`)
    } catch (error) {
      console.error('Failed to load test data:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    } finally {
      setIsLoadingTestData(false)
    }
  }

  if (isSignedIn) {
    return (
      <Card className="border border-green-200/60 dark:border-green-700/60 shadow-lg hover:shadow-green-500/20 dark:hover:shadow-green-400/20 transition-all duration-300">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-green-800 dark:text-green-200">
            ‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </CardTitle>
          <CardDescription>
            {currentUser ? (
              <>
                {getUserConfig(currentUser).avatar} {getUserConfig(currentUser).name}<br/>
                {getUserConfig(currentUser).email}<br/>
                –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –æ–±–ª–∞–∫–æ–º
              </>
            ) : (
              <>
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å<br/>
                –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –æ–±–ª–∞–∫–æ–º
              </>
            )}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Button 
              onClick={handleLoadUserData} 
              disabled={isSyncing}
              variant="outline"
              className="flex-1 border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-300"
            >
              {isSyncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞'}
            </Button>
            <Button 
              onClick={handleSyncToCloud} 
              disabled={isSyncing}
              variant="outline"
              className="flex-1 border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-300"
            >
              {isSyncing ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ'}
            </Button>
          </div>
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <div className="space-y-2">
            <div className="text-sm font-medium">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</div>
            <div className="flex gap-2">
              <Button 
                onClick={() => handleUserLogin('pavel')} 
                disabled={isAutoLogin || currentUser === 'pavel'}
                variant={currentUser === 'pavel' ? 'default' : 'outline'}
                className={`flex-1 transition-all duration-300 ${
                  currentUser === 'pavel' 
                    ? 'bg-gradient-to-r from-purple-500 to-violet-500 hover:from-purple-600 hover:to-violet-600 text-white border-0 shadow-md hover:shadow-lg' 
                    : 'border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800'
                }`}
              >
                üë®‚Äçüíª Pavel
              </Button>
              <Button 
                onClick={() => handleUserLogin('aleksandra')} 
                disabled={isAutoLogin || currentUser === 'aleksandra'}
                variant={currentUser === 'aleksandra' ? 'default' : 'outline'}
                className={`flex-1 transition-all duration-300 ${
                  currentUser === 'aleksandra' 
                    ? 'bg-gradient-to-r from-violet-500 to-fuchsia-500 hover:from-violet-600 hover:to-fuchsia-600 text-white border-0 shadow-md hover:shadow-lg' 
                    : 'border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800'
                }`}
              >
                üë©‚Äçüíª Aleksandra
              </Button>
            </div>
          </div>

          <div className="flex gap-2">
            <Button onClick={handleSignOut} variant="destructive" className="flex-1">
              –í—ã–π—Ç–∏
            </Button>
            <Button 
              onClick={() => {
                clearAuthTokens()
                toast.success('–¢–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.')
              }} 
              variant="outline" 
              className="flex-1"
              title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            >
              üîß
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  if (!isSupabaseConfigured) {
    return (
      <Card className="border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-950/20 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            ‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
          </CardTitle>
          <CardDescription>
            –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env.local
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-muted-foreground">
            –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
          </p>
          {/* –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <div className="space-y-2">
            <div className="text-sm font-medium">–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥:</div>
            <div className="flex gap-2">
              <Button 
                onClick={() => handleUserLogin('pavel')} 
                disabled={isAutoLogin}
                variant="default"
                className="flex-1 bg-gradient-to-r from-purple-500 to-violet-500 hover:from-purple-600 hover:to-violet-600 text-white border-0 shadow-md hover:shadow-lg transition-all duration-300"
              >
                {isAutoLogin ? '–í—Ö–æ–¥...' : 'üë®‚Äçüíª Pavel'}
              </Button>
              <Button 
                onClick={() => handleUserLogin('aleksandra')} 
                disabled={isAutoLogin}
                variant="default"
                className="flex-1 bg-gradient-to-r from-violet-500 to-fuchsia-500 hover:from-violet-600 hover:to-fuchsia-600 text-white border-0 shadow-md hover:shadow-lg transition-all duration-300"
              >
                {isAutoLogin ? '–í—Ö–æ–¥...' : 'üë©‚Äçüíª Aleksandra'}
              </Button>
            </div>
          </div>

          <div className="flex gap-2">
            <Button 
              onClick={handleTestConnection} 
              disabled={isTesting}
              variant="secondary"
              className="flex-1 bg-gradient-to-r from-slate-100 to-slate-200 hover:from-slate-200 hover:to-slate-300 dark:from-slate-800 dark:to-slate-700 dark:hover:from-slate-700 dark:hover:to-slate-600 text-slate-800 dark:text-slate-200 border-0 shadow-md hover:shadow-lg transition-all duration-300"
            >
              {isTesting ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üîç –¢–µ—Å—Ç –ë–î'}
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="border border-slate-200/60 dark:border-slate-700/60 shadow-lg hover:shadow-slate-500/20 dark:hover:shadow-slate-400/20 transition-all duration-300">
      <CardHeader>
        <CardTitle className="text-slate-800 dark:text-slate-200">üîê –í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</CardTitle>
        <CardDescription className="text-slate-600 dark:text-slate-400">
          –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="signin" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="signin">–í—Ö–æ–¥</TabsTrigger>
            <TabsTrigger value="signup">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</TabsTrigger>
          </TabsList>
          
          <TabsContent value="signin" className="space-y-4">
            <div className="space-y-2">
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
              <Input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
            <Button 
              onClick={handleSignIn} 
              disabled={isLoading || !email || !password}
              className="w-full bg-gradient-to-r from-purple-500 to-violet-500 hover:from-purple-600 hover:to-violet-600 text-white border-0 shadow-md hover:shadow-lg transition-all duration-300"
            >
              {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </Button>
            <div className="flex gap-2">
              <Button 
                onClick={() => handleUserLogin('pavel')} 
                disabled={isAutoLogin}
                variant="outline"
                className="flex-1 border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-300"
              >
                {isAutoLogin ? '–í—Ö–æ–¥...' : 'üë®‚Äçüíª Pavel'}
              </Button>
              <Button 
                onClick={() => handleUserLogin('aleksandra')} 
                disabled={isAutoLogin}
                variant="outline"
                className="flex-1 border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-300"
              >
                {isAutoLogin ? '–í—Ö–æ–¥...' : 'üë©‚Äçüíª Aleksandra'}
              </Button>
            </div>
          </TabsContent>
          
          <TabsContent value="signup" className="space-y-4">
            <div className="space-y-2">
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
              <Input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
            <Button 
              onClick={handleSignUp} 
              disabled={isLoading || !email || !password || password.length < 6}
              className="w-full bg-gradient-to-r from-violet-500 to-fuchsia-500 hover:from-violet-600 hover:to-fuchsia-600 text-white border-0 shadow-md hover:shadow-lg transition-all duration-300"
            >
              {isLoading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
            </Button>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}
