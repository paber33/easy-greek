"use client";

import { useState, useEffect } from "react";
import { supabase, isSupabaseConfigured } from "@/lib/supabase";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { USER_CONFIGS, getUserConfig, getCurrentUserFromEmail } from "@/lib/user-config";
import { testSupabaseConnection } from "@/lib/test-supabase";
import { getTestCards } from "@/lib/test-data";
import { LocalCardsRepository } from "@/lib/localRepositories";
import { loadAndSaveUserDataFromSupabase, syncAllDataToSupabase } from "@/lib/core/storage";
import { toast } from "sonner";
import { Logo } from "@/components/logo";

interface LoginScreenProps {
  onLogin: () => void;
}

export function LoginScreen({ onLogin }: LoginScreenProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [isSignedIn, setIsSignedIn] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isSyncing, setIsSyncing] = useState(false);
  const [isTesting, setIsTesting] = useState(false);
  const [isAutoLogin, setIsAutoLogin] = useState(false);
  const [isLoadingTestData, setIsLoadingTestData] = useState(false);
  const [currentUser, setCurrentUser] = useState<"pavel" | "aleksandra" | null>(null);

  useEffect(() => {
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (event, session) => {
      setIsSignedIn(!!session);

      if (event === "SIGNED_IN" && session) {
        const userType = getCurrentUserFromEmail(session.user.email || "");
        setCurrentUser(userType);

        const userConfig = userType ? getUserConfig(userType) : null;
        const userName = userConfig?.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

        toast.success(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! üëã`);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        await handleLoadUserData();
        onLogin(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
      } else if (event === "SIGNED_OUT") {
        setCurrentUser(null);
        toast.info("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const autoLoginOnStartup = async () => {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      if (session) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ —Ç–∏–ø
        const userType = getCurrentUserFromEmail(session.user.email || "");
        setCurrentUser(userType);
        setIsSignedIn(true);
        onLogin(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
      }
      // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏—Ç—å –≤ Pavel - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    };

    autoLoginOnStartup();

    return () => subscription.unsubscribe();
  }, [onLogin]);

  const handleSignUp = async () => {
    setIsLoading(true);
    try {
      const { error } = await supabase.auth.signUp({
        email,
        password,
      });
      if (error) throw error;
      toast.success("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!");
    } catch (error: any) {
      toast.error(error.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSignIn = async () => {
    setIsLoading(true);
    try {
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;
    } catch (error: any) {
      toast.error(error.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
    } finally {
      setIsLoading(false);
    }
  };

  const handleUserLogin = async (userId: "pavel" | "aleksandra") => {
    setIsAutoLogin(true);
    try {
      const userConfig = getUserConfig(userId);

      // –¢–æ–ª—å–∫–æ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: userConfig.email,
        password: userConfig.password,
      });

      if (signInError) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
        toast.error(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userConfig.name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ Supabase Dashboard.`
        );
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userConfig.name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ Supabase.`);
      } else {
        toast.success(`‚úÖ –í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å ${userConfig.name} –≤—ã–ø–æ–ª–Ω–µ–Ω!`);
      }
    } catch (error: any) {
      console.error("User login failed:", error);
      toast.error(`–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsAutoLogin(false);
    }
  };

  const handleLoadUserData = async () => {
    setIsSyncing(true);
    try {
      await loadAndSaveUserDataFromSupabase();
      toast.success("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–±–ª–∞–∫–∞!");
    } catch (error) {
      console.error("Failed to load user data:", error);
      toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞");
    } finally {
      setIsSyncing(false);
    }
  };

  const handleSyncToCloud = async () => {
    setIsSyncing(true);
    try {
      await syncAllDataToSupabase();
      toast.success("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ–±–ª–∞–∫–æ!");
    } catch (error) {
      console.error("Failed to sync data:", error);
      toast.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º");
    } finally {
      setIsSyncing(false);
    }
  };

  const handleTestConnection = async () => {
    setIsTesting(true);
    try {
      const result = await testSupabaseConnection();
      if (result.success) {
        toast.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!");
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}`);
      }
    } catch (error) {
      console.error("Test connection failed:", error);
      toast.error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    } finally {
      setIsTesting(false);
    }
  };

  const handleLoadTestData = async () => {
    setIsLoadingTestData(true);
    try {
      const testCards = getTestCards(currentUser || undefined);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
      // Note: This would need profileId, but for test data we'll skip for now
      // await LocalCardsRepository.bulkSave(profileId, testCards)

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase
      await syncAllDataToSupabase();

      const userName = currentUser ? getUserConfig(currentUser).name : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
      toast.success(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${userName}!`);
    } catch (error) {
      console.error("Failed to load test data:", error);
      toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    } finally {
      setIsLoadingTestData(false);
    }
  };

  if (!isSupabaseConfigured) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-full max-w-md glass-effect shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-3 text-xl font-semibold">
              <div className="p-2 rounded-xl gradient-purple-soft">‚ö†Ô∏è</div>
              Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            </CardTitle>
            <CardDescription>
              –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ
              .env.local
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-muted-foreground">
              –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
            </p>
            <Button
              onClick={handleTestConnection}
              disabled={isTesting}
              variant="secondary"
              className="w-full shadow-medium hover:shadow-strong transition-all duration-300 ease-out"
            >
              {isTesting ? "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..." : "üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"}
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-md space-y-6 sm:space-y-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center space-y-6 sm:space-y-8">
          <h1 className="text-5xl sm:text-6xl font-light tracking-tight bg-gradient-to-r from-[#8B5CF6] via-[#7C3AED] to-[#6D28D9] bg-clip-text text-transparent">
            Greekly
          </h1>
          <p className="text-muted-foreground text-xl sm:text-2xl font-light">
            –£–º–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –≥—Ä–µ—á–µ—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
          </p>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ */}
        <Card className="glass-effect shadow-lg">
          <CardHeader>
            <CardTitle className="text-center text-foreground text-xl font-semibold">
              üöÄ –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥
            </CardTitle>
            <CardDescription className="text-center text-muted-foreground">
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3 sm:space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
              <Button
                onClick={() => handleUserLogin("pavel")}
                disabled={isAutoLogin}
                variant="secondary"
                size="lg"
                className="h-24 flex flex-col gap-3 shadow-medium hover:shadow-strong transition-all duration-300 ease-out"
              >
                <span className="text-4xl">üë®‚Äçüíª</span>
                <span className="font-light text-xl">Pavel</span>
              </Button>
              <Button
                onClick={() => handleUserLogin("aleksandra")}
                disabled={isAutoLogin}
                variant="secondary"
                size="lg"
                className="h-24 flex flex-col gap-3 shadow-medium hover:shadow-strong transition-all duration-300 ease-out"
              >
                <span className="text-4xl">üë©‚Äçüíª</span>
                <span className="font-light text-xl">Aleksandra</span>
              </Button>
            </div>

            {isAutoLogin && (
              <div className="text-center text-sm text-muted-foreground">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...</div>
            )}
          </CardContent>
        </Card>

        {/* –†—É—á–Ω–æ–π –≤—Ö–æ–¥ */}
        <Card className="glass-effect shadow-lg">
          <CardHeader>
            <CardTitle className="text-center text-xl font-semibold text-foreground">
              üîê –†—É—á–Ω–æ–π –≤—Ö–æ–¥
            </CardTitle>
            <CardDescription className="text-center text-muted-foreground">
              –ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é email –∏ –ø–∞—Ä–æ–ª—è
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="signin" className="w-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="signin">–í—Ö–æ–¥</TabsTrigger>
                <TabsTrigger value="signup">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</TabsTrigger>
              </TabsList>

              <TabsContent value="signin" className="space-y-3 sm:space-y-4">
                <div className="space-y-2">
                  <Input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    className="h-11 sm:h-10"
                  />
                  <Input
                    type="password"
                    placeholder="–ü–∞—Ä–æ–ª—å"
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    className="h-11 sm:h-10"
                  />
                </div>
                <Button
                  onClick={handleSignIn}
                  disabled={isLoading || !email || !password}
                  className="w-full h-12 shadow-medium hover:shadow-strong transition-all duration-300 ease-out"
                >
                  {isLoading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
                </Button>
              </TabsContent>

              <TabsContent value="signup" className="space-y-3 sm:space-y-4">
                <div className="space-y-2">
                  <Input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    className="h-11 sm:h-10"
                  />
                  <Input
                    type="password"
                    placeholder="–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    className="h-11 sm:h-10"
                  />
                </div>
                <Button
                  onClick={handleSignUp}
                  disabled={isLoading || !email || !password || password.length < 6}
                  className="w-full h-12 shadow-medium hover:shadow-strong transition-all duration-300 ease-out"
                >
                  {isLoading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
                </Button>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
