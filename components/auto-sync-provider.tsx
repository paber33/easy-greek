"use client";

import { useEffect, useState } from "react";
import { getAutoSyncService } from "@/lib/auto-sync";
import { useProfile } from "@/lib/hooks/use-profile";

interface AutoSyncProviderProps {
  children: React.ReactNode;
}

export function AutoSyncProvider({ children }: AutoSyncProviderProps) {
  const { currentProfileId, isLoading } = useProfile();
  const [syncStatus, setSyncStatus] = useState({
    isOnline: true,
    lastSyncTime: 0,
    isAutoSyncActive: false,
    timeSinceLastSync: 0,
  });
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–ª–∏–µ–Ω—Ç–∞
    setIsClient(true);
  }, []);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (!isLoading && currentProfileId) {
      console.log("üîÑ Initializing auto-sync for profile:", currentProfileId);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
      const autoSyncService = getAutoSyncService();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const syncWithDelay = async () => {
        await new Promise(resolve => setTimeout(resolve, 500)); // –ñ–¥–µ–º 500–º—Å
        await autoSyncService.forceSync();
      };

      syncWithDelay().catch(error => {
        console.error("Failed to sync after delay:", error);
      });
    }
  }, [currentProfileId, isLoading]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const statusInterval = setInterval(() => {
      const autoSyncService = getAutoSyncService();
      setSyncStatus(autoSyncService.getSyncStatus());
    }, 5000);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      clearInterval(statusInterval);
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    if (syncStatus.timeSinceLastSync > 0) {
      const minutesAgo = Math.floor(syncStatus.timeSinceLastSync / 60000);
      if (minutesAgo > 0) {
        console.log(`üîÑ Last sync: ${minutesAgo} minutes ago`);
      }
    }
  }, [syncStatus]);

  return (
    <>
      {children}
      {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ UI */}
      {process.env.NODE_ENV === "development" && isClient && (
        <div className="fixed bottom-4 right-4 bg-black/80 text-white text-xs p-2 rounded opacity-50">
          <div>Online: {syncStatus.isOnline ? "‚úÖ" : "‚ùå"}</div>
          <div>Auto-sync: {syncStatus.isAutoSyncActive ? "üîÑ" : "‚èπÔ∏è"}</div>
          <div>Last sync: {Math.floor(syncStatus.timeSinceLastSync / 1000)}s ago</div>
        </div>
      )}
    </>
  );
}
