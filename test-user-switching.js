#!/usr/bin/env node

const { chromium } = require('@playwright/test');

async function testUserSwitching() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    await page.goto('http://localhost:3000/');
    await page.waitForLoadState('networkidle');
    
    // –í—Ö–æ–¥–∏–º –∫–∞–∫ Pavel
    console.log('üîÑ –í—Ö–æ–¥–∏–º –∫–∞–∫ Pavel...');
    const pavelButton = page.locator('button:has-text("Pavel"), button:has-text("üë®‚Äçüíª Pavel")');
    await pavelButton.first().click();
    await page.waitForTimeout(3000);
    
    const pavelState = await page.evaluate(() => {
      return {
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
        userEmail: localStorage.getItem('supabase.auth.token') ? 'pavel@easy-greek.com' : null
      };
    });
    
    console.log('üë®‚Äçüíª Pavel:');
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${pavelState.cards}`);
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${pavelState.isSignedIn}`);
    console.log(`   Email: ${pavelState.userEmail}`);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Aleksandra
    console.log('\nüîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Aleksandra...');
    const aleksandraButton = page.locator('button:has-text("Aleksandra"), button:has-text("üë©‚Äçüíª Aleksandra")');
    await aleksandraButton.first().click();
    await page.waitForTimeout(3000);
    
    const aleksandraState = await page.evaluate(() => {
      return {
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
        userEmail: localStorage.getItem('supabase.auth.token') ? 'aleksandra@easy-greek.com' : null
      };
    });
    
    console.log('üë©‚Äçüíª Aleksandra:');
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${aleksandraState.cards}`);
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${aleksandraState.isSignedIn}`);
    console.log(`   Email: ${aleksandraState.userEmail}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã–µ
    if (pavelState.cards !== aleksandraState.cards) {
      console.log('\n‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      console.log(`   Pavel: ${pavelState.cards} –∫–∞—Ä—Ç–æ—á–µ–∫`);
      console.log(`   Aleksandra: ${aleksandraState.cards} –∫–∞—Ä—Ç–æ—á–µ–∫`);
    } else {
      console.log('\n‚ö†Ô∏è  –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫');
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ Pavel
    console.log('\nüîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ Pavel...');
    await pavelButton.first().click();
    await page.waitForTimeout(3000);
    
    const pavelState2 = await page.evaluate(() => {
      return {
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null
      };
    });
    
    console.log('üë®‚Äçüíª Pavel (–ø–æ–≤—Ç–æ—Ä–Ω–æ):');
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${pavelState2.cards}`);
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${pavelState2.isSignedIn}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ Pavel –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
    if (pavelState.cards === pavelState2.cards) {
      console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ Pavel –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('\n‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ Pavel –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'user-switching-test.png' });
    console.log('\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: user-switching-test.png');
    
    console.log('\nüéâ –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

testUserSwitching();
