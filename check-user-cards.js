const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º .env.local —Ñ–∞–π–ª
let supabaseUrl, supabaseKey;
try {
  const envContent = fs.readFileSync('.env.local', 'utf8');
  const lines = envContent.split('\n');
  
  for (const line of lines) {
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_URL=')) {
      supabaseUrl = line.split('=')[1];
    }
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_ANON_KEY=')) {
      supabaseKey = line.split('=')[1];
    }
  }
} catch (error) {
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env.local');
  process.exit(1);
}

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkUserCards() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError.message);
      return;
    }
    
    if (!session) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
      return;
    }
    
    console.log(`üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.user.email}`);
    console.log(`   ID: ${session.user.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: cards, error: cardsError } = await supabase
      .from('cards')
      .select('*')
      .eq('user_id', session.user.id);
    
    if (cardsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: ${cardsError.message}`);
      return;
    }
    
    console.log(`\nüìö –ö–∞—Ä—Ç–æ—á–µ–∫ –≤ –ë–î: ${cards.length}`);
    
    if (cards.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
      const statusCounts = cards.reduce((acc, card) => {
        acc[card.status] = (acc[card.status] || 0) + 1;
        return acc;
      }, {});
      
      console.log(`üìà –°—Ç–∞—Ç—É—Å—ã –∫–∞—Ä—Ç–æ—á–µ–∫:`);
      Object.entries(statusCounts).forEach(([status, count]) => {
        console.log(`   ${status}: ${count}`);
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
      console.log(`\nüìù –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫:`);
      cards.slice(0, 5).forEach((card, index) => {
        console.log(`   ${index + 1}. ${card.greek} ‚Üí ${card.translation} (${card.status})`);
        console.log(`      –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${card.reps}, –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${card.correct}, –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${card.incorrect}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const duplicates = cards.filter((card, index) => 
        cards.findIndex(c => c.greek === card.greek && c.translation === card.translation) !== index
      );
      
      if (duplicates.length > 0) {
        console.log(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates.length}`);
        duplicates.slice(0, 3).forEach((card, index) => {
          console.log(`   ${index + 1}. ${card.greek} ‚Üí ${card.translation}`);
        });
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å–µ—Å—Å–∏–π
    const { data: logs, error: logsError } = await supabase
      .from('session_logs')
      .select('*')
      .eq('user_id', session.user.id)
      .order('date', { ascending: false })
      .limit(10);
    
    if (logsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${logsError.message}`);
      return;
    }
    
    console.log(`\nüìä –õ–æ–≥–æ–≤ —Å–µ—Å—Å–∏–π: ${logs.length}`);
    if (logs.length > 0) {
      console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏:`);
      logs.forEach(log => {
        console.log(`   ${log.date}: ${log.total_reviewed} –∫–∞—Ä—Ç–æ—á–µ–∫, —Ç–æ—á–Ω–æ—Å—Ç—å ${log.accuracy}%`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: config, error: configError } = await supabase
      .from('user_configs')
      .select('*')
      .eq('user_id', session.user.id)
      .single();
    
    if (configError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${configError.message}`);
    } else if (config) {
      console.log(`\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
      console.log(`   –ù–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å: ${config.daily_new}`);
      console.log(`   –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å: ${config.daily_reviews}`);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkUserCards();
