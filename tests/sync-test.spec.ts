import { test, expect } from '@playwright/test';

test.describe('User Sync Tests', () => {
  test('test user authentication and sync', async ({ page }) => {
    await page.goto('http://localhost:3002/');
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    const isSupabaseConfigured = await page.evaluate(() => {
      return localStorage.getItem('NEXT_PUBLIC_SUPABASE_URL') !== null || 
             window.location.hostname === 'localhost';
    });
    
    if (!isSupabaseConfigured) {
      console.log('‚ö†Ô∏è  Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const initialAuthState = await page.evaluate(() => {
      return {
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length
      };
    });
    
    console.log('üîç –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${initialAuthState.isSignedIn}`);
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${initialAuthState.cards}`);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
    const pavelButton = page.locator('button:has-text("Pavel"), button:has-text("üë®‚Äçüíª Pavel")');
    const aleksandraButton = page.locator('button:has-text("Aleksandra"), button:has-text("üë©‚Äçüíª Aleksandra")');
    
    if (await pavelButton.count() > 0) {
      console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ Pavel...');
      
      // –í—Ö–æ–¥–∏–º –∫–∞–∫ Pavel
      await pavelButton.first().click();
      await page.waitForTimeout(3000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const pavelAuthState = await page.evaluate(() => {
        return {
          isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
          cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
          userEmail: localStorage.getItem('supabase.auth.token') ? 'pavel@easy-greek.com' : null
        };
      });
      
      console.log('üë®‚Äçüíª Pavel:');
      console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${pavelAuthState.isSignedIn}`);
      console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${pavelAuthState.cards}`);
      
      if (pavelAuthState.isSignedIn) {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        const syncButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ"), button:has-text("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")');
        if (await syncButton.count() > 0) {
          console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Pavel...');
          await syncButton.first().click();
          await page.waitForTimeout(2000);
        }
      }
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Aleksandra
    if (await aleksandraButton.count() > 0) {
      console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Aleksandra...');
      
      await aleksandraButton.first().click();
      await page.waitForTimeout(3000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Aleksandra
      const aleksandraAuthState = await page.evaluate(() => {
        return {
          isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
          cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
          userEmail: localStorage.getItem('supabase.auth.token') ? 'aleksandra@easy-greek.com' : null
        };
      });
      
      console.log('üë©‚Äçüíª Aleksandra:');
      console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${aleksandraAuthState.isSignedIn}`);
      console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${aleksandraAuthState.cards}`);
      
      if (aleksandraAuthState.isSignedIn) {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        const syncButton = page.locator('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ"), button:has-text("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")');
        if (await syncButton.count() > 0) {
          console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Aleksandra...');
          await syncButton.first().click();
          await page.waitForTimeout(2000);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const finalState = await page.evaluate(() => {
      return {
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
        config: JSON.parse(localStorage.getItem('easy-greek-config') || '{}'),
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null
      };
    });
    
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${finalState.isSignedIn}`);
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${finalState.cards}`);
    console.log(`   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${JSON.stringify(finalState.config)}`);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'sync-test-result.png' });
  });
  
  test('test data persistence across sessions', async ({ page }) => {
    await page.goto('http://localhost:3002/');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const initialData = await page.evaluate(() => {
      return {
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]'),
        config: JSON.parse(localStorage.getItem('easy-greek-config') || '{}'),
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null
      };
    });
    
    console.log('üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${initialData.cards.length}`);
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${initialData.isSignedIn}`);
    
    // –í—Ö–æ–¥–∏–º –∫–∞–∫ Pavel
    const pavelButton = page.locator('button:has-text("Pavel"), button:has-text("üë®‚Äçüíª Pavel")');
    if (await pavelButton.count() > 0) {
      await pavelButton.first().click();
      await page.waitForTimeout(3000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Pavel
      const pavelData = await page.evaluate(() => {
        return {
          cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]'),
          isSignedIn: localStorage.getItem('supabase.auth.token') !== null
        };
      });
      
      console.log('üë®‚Äçüíª –î–∞–Ω–Ω—ã–µ Pavel:');
      console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${pavelData.cards.length}`);
      console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${pavelData.isSignedIn}`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await page.reload();
      await page.waitForLoadState('networkidle');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      const afterReloadData = await page.evaluate(() => {
        return {
          cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]'),
          isSignedIn: localStorage.getItem('supabase.auth.token') !== null
        };
      });
      
      console.log('üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:');
      console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${afterReloadData.cards.length}`);
      console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${afterReloadData.isSignedIn}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
      if (pavelData.cards.length > 0) {
        expect(afterReloadData.cards.length).toBeGreaterThan(0);
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
      }
    }
  });
});
