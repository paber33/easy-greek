import { test, expect } from '@playwright/test';

test.describe('Local Storage Check', () => {
  test('check local storage data', async ({ page }) => {
    await page.goto('http://localhost:3002/');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const localStorageData = await page.evaluate(() => {
      const data: any = {};
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key) {
          try {
            data[key] = JSON.parse(localStorage.getItem(key) || '');
          } catch {
            data[key] = localStorage.getItem(key);
          }
        }
      }
      return data;
    });
    
    console.log('üì¶ LocalStorage –¥–∞–Ω–Ω—ã–µ:');
    Object.entries(localStorageData).forEach(([key, value]) => {
      console.log(`   ${key}:`, typeof value === 'object' ? JSON.stringify(value, null, 2) : value);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    const cards = localStorageData['easy-greek-cards'] || [];
    console.log(`\nüìö –ö–∞—Ä—Ç–æ—á–µ–∫ –≤ localStorage: ${Array.isArray(cards) ? cards.length : '–Ω–µ –º–∞—Å—Å–∏–≤'}`);
    
    if (Array.isArray(cards) && cards.length > 0) {
      console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫:');
      cards.slice(0, 5).forEach((card: any, index: number) => {
        console.log(`   ${index + 1}. ${card.greek} ‚Üí ${card.translation} (${card.status})`);
      });
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
      const statusCounts = cards.reduce((acc: any, card: any) => {
        acc[card.status] = (acc[card.status] || 0) + 1;
        return acc;
      }, {});
      
      console.log('\nüìà –°—Ç–∞—Ç—É—Å—ã –∫–∞—Ä—Ç–æ—á–µ–∫:');
      Object.entries(statusCounts).forEach(([status, count]) => {
        console.log(`   ${status}: ${count}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const config = localStorageData['easy-greek-config'];
    if (config) {
      console.log('\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:');
      console.log(`   –ù–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å: ${config.dailyNew}`);
      console.log(`   –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å: ${config.dailyReviews}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    const session = localStorageData['supabase.auth.token'];
    if (session) {
      console.log('\nüîê –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      console.log('\n‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'local-storage-check.png' });
  });
  
  test('check if users have same data', async ({ page }) => {
    await page.goto('http://localhost:3002/');
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userSwitcher = page.locator('[data-testid="user-switcher"], .user-switcher, button:has-text("Pavel"), button:has-text("Aleksandra")');
    
    if (await userSwitcher.count() > 0) {
      console.log('üîÑ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const firstUserData = await page.evaluate(() => {
        return {
          cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]'),
          config: JSON.parse(localStorage.getItem('easy-greek-config') || '{}')
        };
      });
      
      console.log(`üìä –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstUserData.cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
      await userSwitcher.first().click();
      await page.waitForTimeout(2000);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const secondUserData = await page.evaluate(() => {
        return {
          cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]'),
          config: JSON.parse(localStorage.getItem('easy-greek-config') || '{}')
        };
      });
      
      console.log(`üìä –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${secondUserData.cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (firstUserData.cards.length === secondUserData.cards.length) {
        console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        const sameCards = firstUserData.cards.every((card: any, index: number) => {
          const secondCard = secondUserData.cards[index];
          return secondCard && card.greek === secondCard.greek && card.translation === secondCard.translation;
        });
        
        if (sameCards) {
          console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏!');
        }
      } else {
        console.log('‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
      }
    } else {
      console.log('‚ùå –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });
});
