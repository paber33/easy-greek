#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Supabase
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */

const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://swlsejtlrctqeemvmuwu.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN3bHNlanRscmN0cWVlbXZtdXd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk3MTUwNTYsImV4cCI6MjA3NTI5MTA1Nn0.7q0Q7HDWpMxz90dPGGP1Zlej8zu-D0HTgf-mmngBLuQ';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testFullSync() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Supabase\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    const { data: connectionTest, error: connectionError } = await supabase
      .from('cards')
      .select('count')
      .limit(1);
    
    if (connectionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionError);
      return;
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É cards
    const { data: cardsData, error: cardsError } = await supabase
      .from('cards')
      .select('*')
      .limit(1);
    
    if (cardsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—Ü—ã cards:', cardsError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cards –¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É session_logs
    const { data: logsData, error: logsError } = await supabase
      .from('session_logs')
      .select('*')
      .limit(1);
    
    if (logsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—Ü—ã session_logs:', logsError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ session_logs –¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_configs
    const { data: configData, error: configError } = await supabase
      .from('user_configs')
      .select('*')
      .limit(1);
    
    if (configError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—Ü—ã user_configs:', configError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_configs –¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...');
    
    // –ö–∞—Ä—Ç–æ—á–∫–∏
    const { data: allCards, error: allCardsError } = await supabase
      .from('cards')
      .select('*');
    
    if (allCardsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', allCardsError);
    } else {
      console.log(`üìö –ö–∞—Ä—Ç–æ—á–∫–∏: ${allCards.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (allCards.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const users = {};
        allCards.forEach(card => {
          const userId = card.user_id;
          if (!users[userId]) {
            users[userId] = [];
          }
          users[userId].push(card);
        });
        
        console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏:');
        Object.entries(users).forEach(([userId, userCards]) => {
          console.log(`  - ${userId}: ${userCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        });
      }
    }

    // –õ–æ–≥–∏
    const { data: allLogs, error: allLogsError } = await supabase
      .from('session_logs')
      .select('*');
    
    if (allLogsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', allLogsError);
    } else {
      console.log(`üìä –õ–æ–≥–∏ —Å–µ—Å—Å–∏–π: ${allLogs.length} –∑–∞–ø–∏—Å–µ–π`);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    const { data: allConfigs, error: allConfigsError } = await supabase
      .from('user_configs')
      .select('*');
    
    if (allConfigsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', allConfigsError);
    } else {
      console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allConfigs.length} –∑–∞–ø–∏—Å–µ–π`);
    }

    console.log('');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (RLS)...');
    console.log('‚ÑπÔ∏è RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚ÑπÔ∏è –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ');

    console.log('');

    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('5Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
    
    if (allCards.length === 0) {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫');
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
      console.log('   2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ JSON –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
      console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Netlify');
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –µ—Å—Ç—å');
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
      console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ');
      console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
    }

    console.log('');

    // 6. –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    console.log('6Ô∏è‚É£ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: –†–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞');
    console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    console.log('‚úÖ –û—Ñ–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –í–∫–ª—é—á–µ–Ω–∞');
    
    console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ Pavel –∏–ª–∏ Aleksandra');
    console.log('3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ JSON');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏');

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFullSync();
