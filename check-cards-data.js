const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º .env.local —Ñ–∞–π–ª
let supabaseUrl, supabaseKey;
try {
  const envContent = fs.readFileSync('.env.local', 'utf8');
  const lines = envContent.split('\n');
  
  for (const line of lines) {
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_URL=')) {
      supabaseUrl = line.split('=')[1];
    }
    if (line.startsWith('NEXT_PUBLIC_SUPABASE_ANON_KEY=')) {
      supabaseKey = line.split('=')[1];
    }
  }
} catch (error) {
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env.local');
  process.exit(1);
}

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkCardsData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message);
      return;
    }

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.users.length}`);
    
    for (const user of users.users) {
      console.log(`\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
      console.log(`   ID: ${user.id}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: cards, error: cardsError } = await supabase
        .from('cards')
        .select('*')
        .eq('user_id', user.id);
      
      if (cardsError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: ${cardsError.message}`);
        continue;
      }
      
      console.log(`   üìö –ö–∞—Ä—Ç–æ—á–µ–∫ –≤ –ë–î: ${cards.length}`);
      
      if (cards.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
        const statusCounts = cards.reduce((acc, card) => {
          acc[card.status] = (acc[card.status] || 0) + 1;
          return acc;
        }, {});
        
        console.log(`   üìà –°—Ç–∞—Ç—É—Å—ã –∫–∞—Ä—Ç–æ—á–µ–∫:`);
        Object.entries(statusCounts).forEach(([status, count]) => {
          console.log(`      ${status}: ${count}`);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        console.log(`   üìù –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫:`);
        cards.slice(0, 3).forEach((card, index) => {
          console.log(`      ${index + 1}. ${card.greek} ‚Üí ${card.translation} (${card.status})`);
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å–µ—Å—Å–∏–π
      const { data: logs, error: logsError } = await supabase
        .from('session_logs')
        .select('*')
        .eq('user_id', user.id)
        .order('date', { ascending: false })
        .limit(5);
      
      if (logsError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${logsError.message}`);
        continue;
      }
      
      console.log(`   üìä –õ–æ–≥–æ–≤ —Å–µ—Å—Å–∏–π: ${logs.length}`);
      if (logs.length > 0) {
        console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏:`);
        logs.forEach(log => {
          console.log(`      ${log.date}: ${log.total_reviewed} –∫–∞—Ä—Ç–æ—á–µ–∫, —Ç–æ—á–Ω–æ—Å—Ç—å ${log.accuracy}%`);
        });
      }
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    const { data: allCards, error: allCardsError } = await supabase
      .from('cards')
      .select('user_id, status');
    
    if (!allCardsError && allCards) {
      const totalCards = allCards.length;
      const userCardCounts = allCards.reduce((acc, card) => {
        acc[card.user_id] = (acc[card.user_id] || 0) + 1;
        return acc;
      }, {});
      
      console.log(`   üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ë–î: ${totalCards}`);
      console.log(`   üë• –ö–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:`);
      Object.entries(userCardCounts).forEach(([userId, count]) => {
        const user = users.users.find(u => u.id === userId);
        console.log(`      ${user?.email || userId}: ${count}`);
      });
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkCardsData();
