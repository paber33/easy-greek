#!/usr/bin/env node

const { chromium } = require('@playwright/test');

async function testPavelLogin() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ Pavel...\n');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    await page.goto('http://localhost:3000/');
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const initialState = await page.evaluate(() => {
      return {
        cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
        isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
        allKeys: Object.keys(localStorage).filter(key => key.includes('supabase') || key.includes('auth'))
      };
    });
    
    console.log('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${initialState.cards}`);
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${initialState.isSignedIn}`);
    console.log(`   Supabase –∫–ª—é—á–∏: ${initialState.allKeys.join(', ')}`);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É Pavel
    const pavelButton = page.locator('button:has-text("Pavel"), button:has-text("üë®‚Äçüíª Pavel")');
    
    if (await pavelButton.count() > 0) {
      console.log('\nüîÑ –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É Pavel...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
      const consoleMessages = [];
      page.on('console', msg => {
        consoleMessages.push({
          type: msg.type(),
          text: msg.text()
        });
      });
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
      await pavelButton.first().click();
      
      // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await page.waitForTimeout(5000);
      
      const afterClickState = await page.evaluate(() => {
        return {
          cards: JSON.parse(localStorage.getItem('easy-greek-cards') || '[]').length,
          isSignedIn: localStorage.getItem('supabase.auth.token') !== null,
          allKeys: Object.keys(localStorage).filter(key => key.includes('supabase') || key.includes('auth')),
          bodyText: document.body.textContent?.substring(0, 500)
        };
      });
      
      console.log('\nüë®‚Äçüíª –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞:');
      console.log(`   –ö–∞—Ä—Ç–æ—á–µ–∫: ${afterClickState.cards}`);
      console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${afterClickState.isSignedIn}`);
      console.log(`   Supabase –∫–ª—é—á–∏: ${afterClickState.allKeys.join(', ')}`);
      console.log(`   –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${afterClickState.bodyText}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
      if (consoleMessages.length > 0) {
        console.log('\nüìù –°–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏:');
        consoleMessages.forEach(msg => {
          if (msg.type === 'error') {
            console.log(`   ‚ùå ${msg.text}`);
          } else if (msg.type === 'warn') {
            console.log(`   ‚ö†Ô∏è  ${msg.text}`);
          } else {
            console.log(`   ‚ÑπÔ∏è  ${msg.text}`);
          }
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const notifications = await page.evaluate(() => {
        const toasts = document.querySelectorAll('[data-sonner-toast], .toast, [role="alert"]');
        return Array.from(toasts).map(toast => toast.textContent?.trim()).filter(Boolean);
      });
      
      if (notifications.length > 0) {
        console.log('\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:');
        notifications.forEach(notification => {
          console.log(`   ${notification}`);
        });
      }
      
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ Pavel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'pavel-login-test.png' });
    console.log('\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: pavel-login-test.png');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

testPavelLogin();
