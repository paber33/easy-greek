#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Supabase
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–ª–æ–≤–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ Supabase
 */

const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://swlsejtlrctqeemvmuwu.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN3bHNlanRscmN0cWVlbXZtdXd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk3MTUwNTYsImV4cCI6MjA3NTI5MTA1Nn0.7q0Q7HDWpMxz90dPGGP1Zlej8zu-D0HTgf-mmngBLuQ';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testSupabaseSync() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const { data, error } = await supabase
      .from('cards')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã cards...');
    const { data: cards, error: cardsError } = await supabase
      .from('cards')
      .select('*')
      .limit(100);
    
    if (cardsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', cardsError);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ Supabase: ${cards.length}`);
    
    if (cards.length === 0) {
      console.log('‚ö†Ô∏è –í Supabase –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫');
      console.log('üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ:');
      console.log('   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      console.log('   2. –°–ª–æ–≤–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      console.log('   3. –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ JSON');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const users = {};
    cards.forEach(card => {
      const userId = card.user_id;
      if (!users[userId]) {
        users[userId] = [];
      }
      users[userId].push(card);
    });
    
    console.log('\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
    Object.entries(users).forEach(([userId, userCards]) => {
      console.log(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${userCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤
      const sampleWords = userCards.slice(0, 3).map(card => 
        `${card.greek} - ${card.translation}`
      );
      console.log(`    –ü—Ä–∏–º–µ—Ä—ã: ${sampleWords.join(', ')}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö...');
    const sampleCard = cards[0];
    console.log('–ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏:');
    console.log(`  ID: ${sampleCard.id}`);
    console.log(`  User ID: ${sampleCard.user_id}`);
    console.log(`  Greek: ${sampleCard.greek}`);
    console.log(`  Translation: ${sampleCard.translation}`);
    console.log(`  Status: ${sampleCard.status}`);
    console.log(`  Tags: ${JSON.stringify(sampleCard.tags)}`);
    console.log(`  Examples: ${sampleCard.examples ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
    console.log(`  Pronunciation: ${sampleCard.pronunciation || '–ù–µ—Ç'}`);
    console.log(`  Notes: ${sampleCard.notes || '–ù–µ—Ç'}`);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:');
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏');
    console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Netlify');
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSupabaseSync();
